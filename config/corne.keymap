/*
* Copyright (c) 2020 The ZMK Contributors
*
* SPDX-License-Identifier: MIT
*/

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>

/ {
    behaviors {
        hrm_right: hrm_right {
            compatible = "zmk,behavior-hold-tap";
            label = "HRM_RIGHT";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <280>;
            flavor = "balanced";
            quick-tap-ms = <175>;
            require-prior-idle-ms = <150>;
            hold-trigger-on-release;
            hold-trigger-key-positions = <0 1 2 3 4 5 12 13 14 15 16 17 24 25 26 27 28 29 38 37 36 39 40 41>;
        };

        layer_hold_mods: layer_hold_mods {
            compatible = "zmk,behavior-hold-tap";
            label = "LAYER_HOLD_MODS";
            bindings = <&mo>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            flavor = "hold-preferred";
            require-prior-idle-ms = <130>;
        };

        instant_sticky_shift: instant_sticky_shift {
            compatible = "zmk,behavior-sticky-key";
            label = "INSTANT_STICKY_SHIFT";
            bindings = <&kp>;
            #binding-cells = <1>;
            quick-release;
            release-after-ms = <3000>;
            ignore-modifiers;
        };

        sticky_shift_mod_layer: sticky_shift_mod_layer {
            compatible = "zmk,behavior-hold-tap";
            label = "STICKY_SHIFT_MOD_LAYER";
            bindings = <&mo>, <&instant_sticky_shift>;

            #binding-cells = <2>;
            tapping-term-ms = <150>;
            flavor = "tap-preferred";
        };

        hrm_left: hrm_left {
            compatible = "zmk,behavior-hold-tap";
            label = "HRM_LEFT";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <280>;
            flavor = "balanced";
            quick-tap-ms = <175>;
            require-prior-idle-ms = <150>;
            hold-trigger-on-release;
            hold-trigger-key-positions = <6 7 8 9 10 11 18 19 20 21 22 23 30 31 32 33 34 35 41 40 39 38 37 36>;
        };

        tap_dance_caps: tap_dance_caps {
            compatible = "zmk,behavior-tap-dance";
            label = "TAP_DANCE_CAPS";
            #binding-cells = <0>;
            bindings = <&sticky_shift_mod_layer 2 RIGHT_SHIFT>, <&caps_word>;

            tapping-term-ms = <150>;
        };
    };

    combos {
        compatible = "zmk,combos";

        enter_dfu {
            bindings = <&bootloader>;
            key-positions = <25 34>;
        };

        clear_bluetooth_profiles {
            bindings = <&bt BT_CLR_ALL>;
            key-positions = <26 33>;
        };

        capsword_combo {
            bindings = <&caps_word>;
            key-positions = <37 40>;
        };

        combo_left_brace {
            bindings = <&kp LEFT_BRACE>;
            key-positions = <1 2>;
        };

        combo_right_brace {
            bindings = <&kp RIGHT_BRACE>;
            key-positions = <5 4>;
        };

        combo_parenthesis {
            bindings = <&kp LEFT_PARENTHESIS>;
            key-positions = <20 19>;
        };

        combo_right_parenthesis {
            bindings = <&kp RIGHT_PARENTHESIS>;
            key-positions = <21 20>;
        };

        combo_dash {
            bindings = <&kp MINUS>;
            key-positions = <31 19>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        home_layer {
            bindings = <
&kp TAB         &kp Q                 &kp W                 &kp E                      &kp R                                 &kp T        &kp Y                     &kp U                                  &kp I                       &kp O                  &kp P                           &kp BSPC
&kp ESCAPE      &hrm_left LEFT_GUI A  &hrm_left LEFT_ALT S  &hrm_left LCTRL D          &hrm_left LEFT_SHIFT F                &kp G        &kp H                     &hrm_right RIGHT_SHIFT J               &hrm_right RIGHT_CONTROL K  &hrm_right LEFT_ALT L  &hrm_right RIGHT_GUI SEMICOLON  &kp SINGLE_QUOTE
&kp LEFT_SHIFT  &kp Z                 &kp X                 &kp C                      &kp V                                 &kp B        &kp N                     &kp M                                  &kp COMMA                   &kp DOT                &kp FSLH                        &kp RIGHT_SHIFT
                                                            &layer_hold_mods 4 ESCAPE  &sticky_shift_mod_layer 1 LEFT_SHIFT  &kp SPACE    &layer_hold_mods 3 ENTER  &sticky_shift_mod_layer 2 RIGHT_SHIFT  &mo 5
            >;
        };

        nav_layer {
            bindings = <
&none  &none         &none         &none              &none            &none    &kp C_AC_REDO   &kp C_AC_PASTE  &kp C_AC_COPY  &kp C_AC_CUT  &kp C_AC_UNDO     &none
&none  &kp LEFT_GUI  &kp LEFT_ALT  &kp RIGHT_CONTROL  &kp RIGHT_SHIFT  &none    &kp LEFT_ARROW  &kp DOWN_ARROW  &kp UP_ARROW   &kp RIGHT     &kp LOCKING_CAPS  &none
&none  &none         &none         &none              &none            &none    &kp HOME        &kp PAGE_DOWN   &kp PAGE_UP    &kp END       &kp INSERT        &none
                                   &none              &none            &none    &kp ENTER       &kp BACKSPACE   &kp DELETE
            >;
        };

        num_layer {
            bindings = <
&none  &kp LEFT_BRACKET  &kp NUMBER_7  &kp NUMBER_8  &kp NUMBER_9  &kp RIGHT_BRACKET    &none      &none      &none          &none             &none         &kp BACKSPACE
&none  &kp SEMI          &kp NUMBER_4  &kp NUMBER_5  &kp NUMBER_6  &kp EQUAL            &kp SPACE  &kp LSHFT  &kp LCTRL      &kp LEFT_ALT      &kp LEFT_GUI  &none
&none  &kp GRAVE         &kp NUMBER_1  &kp NUMBER_2  &kp NUMBER_3  &kp BACKSLASH        &none      &none      &kp LESS_THAN  &kp GREATER_THAN  &kp FSLH      &none
                                       &kp DOT       &kp NUMBER_0  &kp MINUS            &none      &none      &none
            >;
        };

        symbol_layer {
            bindings = <
&none  &kp LEFT_BRACE  &kp AMPERSAND    &kp STAR              &kp LEFT_PARENTHESIS   &kp RIGHT_BRACE    &none      &none      &none          &none             &none         &kp BACKSPACE
&none  &kp COLON       &kp DOLLAR       &kp PERCENT           &kp CARET              &kp PLUS           &kp SPACE  &kp LSHFT  &kp LCTRL      &kp LEFT_ALT      &kp LEFT_GUI  &none
&none  &kp TILDE       &kp EXCLAMATION  &kp AT                &kp HASH               &kp PIPE           &none      &none      &kp LESS_THAN  &kp GREATER_THAN  &none         &none
                                        &kp LEFT_PARENTHESIS  &kp RIGHT_PARENTHESIS  &kp UNDER          &none      &none      &none
            >;
        };

        media {
            bindings = <
&none  &none         &none     &none      &none           &none    &none           &to 0              &to 0            &none         &none  &none
&none  &kp LEFT_GUI  &kp LALT  &kp LCTRL  &kp LEFT_SHIFT  &none    &kp C_PREVIOUS  &kp C_VOLUME_DOWN  &kp C_VOLUME_UP  &kp C_NEXT    &none  &none
&none  &none         &none     &none      &none           &none    &none           &bt BT_SEL 0       &bt BT_SEL 1     &bt BT_SEL 2  &none  &none
                               &none      &none           &none    &kp C_STOP      &kp C_PLAY_PAUSE   &kp C_MUTE
            >;
        };

        function_layer {
            bindings = <
&none  &kp F12  &kp F7  &kp F8  &kp F9     &kp PRINTSCREEN    &none      &none            &none              &none          &none          &none
&none  &kp F11  &kp F4  &kp F5  &kp F6     &kp SCROLLLOCK     &kp SPACE  &kp RIGHT_SHIFT  &kp RIGHT_CONTROL  &kp RIGHT_ALT  &kp RIGHT_GUI  &none
&none  &kp F10  &kp F1  &kp F2  &kp F3     &kp PAUSE_BREAK    &none      &none            &none              &none          &none          &none
                        &none   &kp SPACE  &none              &none      &none            &none
            >;
        };
    };
};
