/*
* Copyright (c) 2020 The ZMK Contributors
*
* SPDX-License-Identifier: MIT
*/

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>

/ {
    behaviors {
        hrm_mods: hrm_mods {
            compatible = "zmk,behavior-hold-tap";
            label = "HRM_MODS";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <250>;
            require-prior-idle-ms = <150>;
            flavor = "balanced";
            hold-trigger-on-release;
            quick-tap-ms = <175>;
        };

        space_hold_mod: space_hold_mod {
            compatible = "zmk,behavior-hold-tap";
            label = "SPACE_HOLD_MOD";
            bindings = <&mo>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <150>;
            flavor = "tap-preferred";
            require-prior-idle-ms = <150>;
        };

        instant_sticky_shift: instant_sticky_shift {
            compatible = "zmk,behavior-sticky-key";
            label = "INSTANT_STICKY_SHIFT";
            bindings = <&kp>;
            #binding-cells = <1>;
            quick-release;
            release-after-ms = <1000>;
        };

        sticky_shift_mod_layer: sticky_shift_mod_layer {
            compatible = "zmk,behavior-hold-tap";
            label = "STICKY_SHIFT_MOD_LAYER";
            bindings = <&mo>, <&instant_sticky_shift>;

            #binding-cells = <2>;
            tapping-term-ms = <150>;
            flavor = "tap-preferred";
        };
    };

    combos {
        compatible = "zmk,combos";

        toggle_layer_4 {
            bindings = <&tog 0>;
            key-positions = <37 40>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        home_layer {
            bindings = <
&kp TAB         &kp Q                 &kp W                 &kp E              &kp R                   &kp T                      &kp Y                    &kp U               &kp I              &kp O                 &kp P                          &kp BSPC
&kp ESCAPE      &hrm_mods LEFT_GUI A  &hrm_mods LEFT_ALT S  &hrm_mods LCTRL D  &hrm_mods LEFT_SHIFT F  &kp G                      &kp H                    &hrm_mods RSHIFT J  &hrm_mods RCTRL K  &hrm_mods LEFT_ALT L  &hrm_mods RIGHT_GUI SEMICOLON  &kp SINGLE_QUOTE
&kp LEFT_SHIFT  &kp Z                 &kp X                 &kp C              &kp V                   &kp B                      &kp N                    &kp M               &kp COMMA          &kp DOT               &kp FSLH                       &kp RIGHT_SHIFT
                                                            &mo 0              &mo 0                   &space_hold_mod 0 SPACE    &space_hold_mod 0 ENTER  &mo 0               &mo 0
            >;
        };

        nav_layer {
            bindings = <
&trans  &trans        &trans        &trans             &trans           &trans    &trans  &kp C_AC_REDO   &kp C_AC_PASTE  &kp C_AC_COPY  &kp C_AC_CUT     &kp C_AC_UNDO
&trans  &kp LEFT_GUI  &kp LEFT_ALT  &kp RIGHT_CONTROL  &kp RIGHT_SHIFT  &trans    &trans  &kp LEFT_ARROW  &kp DOWN_ARROW  &kp UP_ARROW   &kp RIGHT_ARROW  &trans
&trans  &trans        &trans        &trans             &trans           &trans    &trans  &kp HOME        &kp PAGE_DOWN   &kp PAGE_UP    &kp END          &kp DELETE
                                    &trans             &trans           &trans    &trans  &trans          &trans
            >;
        };

        symbol_layer {
            bindings = <
&kp LS(LEFT_BRACE)  &kp LBKT      &trans        &trans             &trans           &kp RIGHT_BRACE    &trans  &kp C_AC_REDO   &kp C_AC_PASTE  &kp C_AC_COPY  &kp C_AC_CUT     &kp C_AC_UNDO
&trans              &kp LEFT_GUI  &kp LEFT_ALT  &kp RIGHT_CONTROL  &kp RIGHT_SHIFT  &trans             &trans  &kp LEFT_ARROW  &kp DOWN_ARROW  &kp UP_ARROW   &kp RIGHT_ARROW  &trans
&trans              &trans        &trans        &trans             &trans           &trans             &trans  &kp HOME        &kp PAGE_DOWN   &kp PAGE_UP    &kp END          &kp DELETE
                                                &trans             &trans           &trans             &trans  &trans          &trans
            >;
        };
    };
};
