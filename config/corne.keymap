/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>

/ {
    behaviors {
        hrm_mods: hrm_mods {
            compatible = "zmk,behavior-hold-tap";
            label = "HRM_MODS";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <250>;
            require-prior-idle-ms = <150>;
            flavor = "balanced";
            hold-trigger-on-release;
            quick-tap-ms = <175>;
        };

        space_hold_mod: space_hold_mod {
            compatible = "zmk,behavior-hold-tap";
            label = "SPACE_HOLD_MOD";
            bindings = <&mo>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <150>;
            flavor = "tap-preferred";
            require-prior-idle-ms = <150>;
        };

        instant_sticky_shift: instant_sticky_shift {
            compatible = "zmk,behavior-sticky-key";
            label = "INSTANT_STICKY_SHIFT";
            bindings = <&kp>;
            #binding-cells = <1>;
            quick-release;
            release-after-ms = <1000>;
        };

        sticky_shift_mod_layer: sticky_shift_mod_layer {
            compatible = "zmk,behavior-hold-tap";
            label = "STICKY_SHIFT_MOD_LAYER";
            bindings = <&mo>, <&instant_sticky_shift>;

            #binding-cells = <2>;
            tapping-term-ms = <150>;
            flavor = "tap-preferred";
        };
    };

    combos {
        compatible = "zmk,combos";

        toggle_layer_4 {
            bindings = <&tog 3>;
            key-positions = <37 40>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  Q  |  W  |  E  |  R  |  T  |   |  Y  |  U   |  I  |  O  |  P  | BKSP |
            // | CTRL |  A  |  S  |  D  |  F  |  G  |   |  H  |  J   |  K  |  L  |  ;  |  '   |
            // | SHFT |  Z  |  X  |  C  |  V  |  B  |   |  N  |  M   |  ,  |  .  |  /  | ESC  |
            //                    | GUI | LWR | SPC |   | ENT | RSE  | ALT |

            bindings = <
&kp TAB         &kp Q                 &kp W                 &kp E              &kp R                   &kp T                      &kp Y                                 &kp U               &kp I              &kp O                 &kp P                          &kp BSPC
&kp ESCAPE      &hrm_mods LEFT_GUI A  &hrm_mods LEFT_ALT S  &hrm_mods LCTRL D  &hrm_mods LEFT_SHIFT F  &kp G                      &kp H                                 &hrm_mods RSHIFT J  &hrm_mods RCTRL K  &hrm_mods LEFT_ALT L  &hrm_mods RIGHT_GUI SEMICOLON  &kp SINGLE_QUOTE
&kp LEFT_SHIFT  &kp Z                 &kp X                 &kp C              &kp V                   &kp B                      &kp N                                 &kp M               &kp COMMA          &kp DOT               &kp FSLH                       &kp ENTER
                                                            &kp LGUI           &mo 1                   &space_hold_mod 2 SPACE    &sticky_shift_mod_layer 1 LEFT_SHIFT  &mo 2               &kp LEFT_ALT
            >;
        };

        lower_layer {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  1  |  2  |  3  |  4  |  5  |   |  6  |  7  |  8  |  9  |  0  | BKSP |
            // | BTCLR| BT1 | BT2 | BT3 | BT4 | BT5 |   | LFT | DWN |  UP | RGT |     |      |
            // | SHFT |     |     |     |     |     |   |     |     |     |     |     |      |
            //                    | GUI |     | SPC |   | ENT |     | ALT |

            bindings = <
&kp TAB    &kp N1  &kp N2  &kp N3        &kp N4  &kp N5       &kp N6    &kp N7          &kp N8        &kp N9     &kp N0  &kp BSPC
&trans     &trans  &trans  &trans        &trans  &trans       &kp LEFT  &kp DOWN_ARROW  &kp UP_ARROW  &kp RIGHT  &trans  &kp SINGLE_QUOTE
&kp LSHFT  &trans  &trans  &trans        &trans  &trans       &kp END   &kp PAGE_DOWN   &kp PAGE_UP   &kp DEL    &trans  &kp ENTER
                           &kp LEFT_ALT  &trans  &kp SPACE    &kp RET   &trans          &kp RALT
            >;
        };

        raise_layer {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  !  |  @  |  #  |  $  |  %  |   |  ^  |  &  |  *  |  (  |  )  | BKSP |
            // | CTRL |     |     |     |     |     |   |  -  |  =  |  [  |  ]  |  \  |  `   |
            // | SHFT |     |     |     |     |     |   |  _  |  +  |  {  |  }  | "|" |  ~   |
            //                    | GUI |     | SPC |   | ENT |     | ALT |

            bindings = <
&kp TAB    &kp EXCL   &kp AT     &kp HASH      &kp DLLR   &kp PRCNT         &kp CARET  &kp AMPS                    &kp LEFT_PARENTHESIS                &kp RIGHT_PARENTHESIS  &kp ASTERISK  &kp BSPC
&kp LCTRL  &kp LC(A)  &trans     &trans        &trans     &kp MINUS         &kp MINUS  &hrm_mods LEFT_SHIFT EQUAL  &hrm_mods RIGHT_CONTROL LEFT_BRACE  &kp RIGHT_BRACE        &kp BSLH      &kp GRAVE
&kp LSHFT  &trans     &kp LA(A)  &kp LC(C)     &kp LC(V)  &kp UNDERSCORE    &kp UNDER  &kp PLUS                    &kp LEFT_BRACKET                    &kp RIGHT_BRACKET      &kp PIPE      &kp TILDE
                                 &kp LEFT_ALT  &trans     &kp SPACE         &kp RET    &trans                      &kp RALT
            >;
        };

        media_layer {
            bindings = <
&trans  &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &trans  &trans         &trans  &trans             &trans           &trans            &trans  &bt BT_CLR
&trans  &trans        &trans        &trans        &trans  &trans         &trans  &kp C_VOLUME_DOWN  &kp C_VOLUME_UP  &kp C_PLAY_PAUSE  &trans  &trans
&trans  &trans        &trans        &trans        &trans  &bootloader    &trans  &trans             &trans           &trans            &trans  &trans
                                    &trans        &to 0   &trans         &trans  &to 0              &trans
            >;
        };
    };
};
